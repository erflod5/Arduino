byte letrasNormales[][8] = {
  {
  B00000000,
  B11111100,
  B11111110,
  B00010010,
  B00010010,
  B11111110,
  B11111100,
  B00000000
},{
  B00000000,
  B11111110,      
  B11111110,
  B10010010,
  B10010010,
  B11111110,
  B01101100,
  B00000000
},{
  B00000000,
  B01111100,
  B11111110,
  B10000010,
  B10000010,
  B11000110,
  B01000100,
  B00000000
},{
  B00000000,
  B11111110,
  B11111110,
  B10000010,
  B10000010,
  B11111110,
  B01111100,
  B00000000
},{
  B00000000,
  B11111110,
  B11111110,
  B10010010,
  B10010010,
  B10010010,
  B10000010,
  B00000000
},{
  B00000000,
  B11111110,
  B11111110,
  B00010010,
  B00010010,
  B00010010,
  B00000010,
  B00000000
},{
  B00000000,
  B01111100,
  B11111110,
  B10000010,
  B10100010,
  B11100110,
  B01100100,
  B00000000
},{
  B00000000,
  B11111110,
  B11111110,
  B00010000,
  B00010000,
  B11111110,
  B11111110,
  B00000000
},{
  B00000000,
  B00000000,
  B10000010,
  B11111110,
  B11111110,
  B10000010,
  B00000000,
  B00000000
},{
  B00000000,
  B01100000,
  B11100000,
  B10000010,
  B11111110,
  B01111110,
  B00000010,
  B00000000
},{
  B00000000,
  B11111110,
  B11111110,
  B00111000,
  B01101100,
  B11000110,
  B10000010,
  B00000000
},{
  B00000000,
  B11111110,
  B11111110,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B00000000
},{
  B00000000,
  B11111110,
  B11111110,
  B00001100,
  B00011000,
  B00001100,
  B11111110,
  B11111110
},{
  B00000000,
  B11111110,
  B11111110,
  B00001100,
  B00011000,
  B00110000,
  B11111110,
  B11111110
},{
  B00000000,
  B01111100,
  B11111110,
  B10000010,
  B10000010,
  B11111110,
  B01111100,
  B00000000
},{
  B00000000,
  B11111110,
  B11111110,
  B00100010,
  B00100010,
  B00111110,
  B00011100,
  B00000000
},{
  B00000000,
  B00111100,
  B01111110,
  B01000010,
  B01100010,
  B11111110,
  B10111100,
  B00000000
},{
  B00000000,
  B11111110,
  B11111110,
  B00110010,
  B01110010,
  B11011110,
  B10001100,
  B00000000
},{
  B00000000,
  B01001100,
  B11011110,
  B10010010,
  B10010010,
  B11110110,
  B01100100,
  B00000000
},{
  B00000000,
  B00000110,
  B00000010,
  B11111110,
  B11111110,
  B00000010,
  B00000110,
  B00000000
},{
  B00000000,
  B01111110,
  B11111110,
  B10000000,
  B10000000,
  B11111110,
  B11111110,
  B00000000
},{
  B00000000,
  B00111110,
  B01111110,
  B11000000,
  B11000000,
  B01111110,
  B00111110,
  B00000000
},{
  B00000000,
  B11111110,
  B11111110,
  B01100000,
  B00110000,
  B01100000,
  B11111110,
  B11111110
},{
  B00000000,
  B11000110,
  B11101110,
  B00111000,
  B00010000,
  B00111000,
  B11101110,
  B11000110
},{
  B00000000,
  B00001110,
  B00011110,
  B11110000,
  B11110000,
  B00011110,
  B00001110,
  B00000000
},{
  B00000000,
  B11000010,
  B11100010,
  B10110010,
  B10011010,
  B10001110,
  B10000110,
  B00000000
},
 {
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000
 }
};

byte numerosNormales[][8] {
{
  B00000000,
  B01111100,
  B11111110,
  B10010010,
  B10001010,
  B11111110,
  B01111100,
  B00000000
},{
  B00000000,
  B10000000,
  B10001000,
  B11111110,
  B11111110,
  B10000000,
  B10000000,
  B00000000
},{
  B00000000,
  B11000100,
  B11100110,
  B10100010,
  B10010010,
  B10011110,
  B10001100,
  B00000000
},{
  B00000000,
  B01000100,
  B11000110,
  B10010010,
  B10010010,
  B11111110,
  B01101100,
  B00000000
},{
  B00000000,
  B00110000,
  B00101000,
  B00100100,
  B11111110,
  B11111110,
  B00100000,
  B00000000
},{
  B00000000,
  B01001110,
  B11001110,
  B10001010,
  B10001010,
  B11111010,
  B01110010,
  B00000000
},{
  B00000000,
  B01111100,
  B11111110,
  B10010010,
  B10010010,
  B11110110,
  B01100100,
  B00000000
},{
  B00000000,
  B00000110,
  B00000110,
  B11100010,
  B11111010,
  B00011110,
  B00000110,
  B00000000
},{
  B00000000,
  B01101100,
  B11111110,
  B10010010,
  B10010010,
  B11111110,
  B01101100,
  B00000000
},{
  B00000000,
  B01001100,
  B11011110,
  B10010010,
  B10010010,
  B11111110,
  B01111100,
  B00000000
 }
};

byte punto[] = {B00000000, B00000000, B00000000, B00011000, B00011000, B00000000, B00000000, B00000000};
byte guiyon[] = {B00000000,B00011000, B00011000, B00011000, B00011000, B00011000, B00011000, B00000000};
byte desplazamientoHor [8] = {B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000};

short letrasMorse[][5] = {
  {1, 2, 0, 0, 0},
  {2, 1, 1, 1, 0},
  {2, 1, 2, 1, 0},
  {2, 1, 1, 0, 0},
  {1, 0, 0, 0, 0},
  {1, 1, 2, 1, 0},
  {2, 2, 1, 0, 0},
  {1, 1, 1, 1, 0},
  {1, 1, 0, 0, 0},
  {1, 2, 2, 2, 0},
  {2, 1, 2, 0, 0},
  {1, 2, 1, 1, 0},
  {2, 2, 0, 0, 0},
  {2, 1, 0, 0, 0},
  {2, 2, 2, 0, 0},
  {1, 2, 2, 1, 0},
  {2, 2, 1, 2, 0},
  {1, 2, 1, 0, 0},
  {1, 1, 1, 0, 0},
  {2, 0, 0, 0, 0},
  {1, 1, 2, 0, 0},
  {1, 1, 1, 2, 0},
  {1, 2, 2, 0, 0},
  {2, 1, 1, 2, 0},
  {2, 1, 2, 2, 0},
  {2, 2, 1, 1, 0},
  {0, 0, 0, 0, 0}
};

short numeroMorse[][5] {
  {2, 2, 2, 2, 2},
  {1, 2, 2, 2, 2},
  {1, 1, 2, 2, 2},
  {1, 1, 1, 2, 2},
  {1, 1, 1, 1, 2},
  {1, 1, 1, 1, 1},
  {2, 1, 1, 1, 1},
  {2, 2, 1, 1, 1},
  {2, 2, 2, 1, 1},
  {2, 2, 2, 2, 1}
};


/*
  for (int i = 0; i < cadena.length(); i++) {
    int ascii = (int) cadena.charAt(i);
    int a = -1;
    boolean isletter = true;
    

    if (isletter) { //LETRA
      for (int j = 0; j < 17; j++) {
        if (j < 8) {
          displayBin();
          desplazar(letrasNormales[a][j]);
        } else {
          displayBin();
          desplazar(B00000000);
        }
        if (j == 8) {
          delay(150);
        }
        delay(50);
      }
      for (int m = 0; m < 5; m++) {
        if (letrasMorse[a][m] == 1) { //punto
          for (int j = 0; j < 17; j++) {
            if (j < 8) {
              displayBin();
              desplazar(punto[j]);
            } else {
              displayBin();
              desplazar(B00000000);
            }
            if (j == 8) {
              buzz(buzzer, 1200, 700 / 16);
            }
            delay(100);
          }
        } else  if (letrasMorse[a][m] == 2) { //guion
          for (int j = 0; j < 17; j++) {

            if (j < 8) {
              displayBin();
              desplazar(guiyon[j]);
            } else {
              displayBin();
              desplazar(B00000000);
            }
            if (j == 8) {
              buzz(buzzer, 1200, 700 / 2);
            }
            delay(100);
          }

        }
      }
    } 
    else { //NUMERO
      for (int j = 0; j < 17; j++) {
        if (j < 8) {
          displayBin();
          desplazar(numerosNormales[a][j]);
        } else {
          displayBin();
          desplazar(B00000000);
        }
        if (j == 8) {
          delay(150);
        }
        delay(50);
      }
      for (int m = 0; m < 5; m++) {
        if (numeroMorse[a][m] == 1) { //punto
          for (int j = 0; j < 17; j++) {
            if (j < 8) {
              displayBin();
              desplazar(punto[j]);
            } else {
              displayBin();
              desplazar(B00000000);
            }
            if (j == 8) {
              buzz(buzzer, 1200, 700 / 16);
            }
            delay(100);
          }
        } else  if (numeroMorse[a][m] == 2) { //guion
          for (int j = 0; j < 17; j++) {
            if (j < 8) {
              displayBin();
              desplazar(guiyon[j]);
            } else {
              displayBin();
              desplazar(B00000000);
            }
            if (j == 8) {
              buzz(buzzer, 1200, 700 / 2);
            }
            delay(100);
          }
        }
      }
    }
    for (int i = 0; i < 8; i++) {
      desplazamientoHor[i] = B00000000;
    }
  }*/

  /*    if (isletter) { //LETRA
      for (int j = 0; j < 17; j++) {
        if (j < 8) {
          displayBin();
          desplazar(letrasNormales[a][j]);
        } else {
          displayBin();
          desplazar(B00000000);
        }
        if (j == 8) {
          delay(150);
        }
        if(leerBoton())
          return;
        delay(25);
      }
      for (int m = 0; m < 5; m++) {
        if (letrasMorse[a][m] == 1) { //punto
          for (int j = 0; j < 17; j++) {
            if (j < 8) {
              displayBin();
              desplazar(punto[j]);
            } else {
              displayBin();
              desplazar(B00000000);
            }
            if (j == 8) {
              buzz(buzzer, 1200, 700 / 4);
            }
            if(leerBoton())
              return;
            delay(25);
          }
        } else  if (letrasMorse[a][m] == 2) { //guion
          for (int j = 0; j < 17; j++) {
            if (j < 8) {
              displayBin();
              desplazar(guiyon[j]);
            } else {
              displayBin();
              desplazar(B00000000);
            }
            if (j == 8) {
              buzz(buzzer, 1200, 800);
            }
            if(leerBoton())
              return;
            delay(25);
          }
        }
      }
    } 
    else { //NUMERO
      for (int j = 0; j < 17; j++) {
        if (j < 8) {
          displayBin();
          desplazar(numerosNormales[a][j]);
        } else {
          displayBin();
          desplazar(B00000000);
        }
        if (j == 8) {
          delay(150);
        }
        if(leerBoton())
          return;
        delay(25);
      }
      for (int m = 0; m < 5; m++) {
        if (numeroMorse[a][m] == 1) { //punto
          for (int j = 0; j < 17; j++) {
            if (j < 8) {
              displayBin();
              desplazar(punto[j]);
            } else {
              displayBin();
              desplazar(B00000000);
            }
            if (j == 8) {
              buzz(buzzer, 1200, 700 / 4);
            }
            if(leerBoton())
              return;
            delay(50);
          }
        } else  if (numeroMorse[a][m] == 2) { //guion
          for (int j = 0; j < 17; j++) {
            if (j < 8) {
              displayBin();
              desplazar(guiyon[j]);
            } else {
              displayBin();
              desplazar(B00000000);
            }
            if (j == 8) {
              buzz(buzzer, 1200, 800);
            }
            if(leerBoton())
              return;
            delay(25);
          }
        }
      }
    }
*/
